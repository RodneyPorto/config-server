server:
  url: http://localhost:${server.port}
  port: 51010
  
spring:
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  data:
    mongodb:
      database: mp_transactions
      host: localhost
      
logging:
  level:
    org.springframework.data.mongodb.core.ReactiveMongoTemplate: DEBUG
   
management:
  endpoints:
    web:
      exposure:
        include: "*"    
    
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    statusPageUrlPath: /actuator/info
    healthCheckUrlPath: /actuator/health      
    instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}
   

amqp:
  transactions:
    exchange:
      transaction:
        updated: updated_transaction
        completed: updated_transaction_complete
        created: created_transaction
      transaction-authorization:
        added: added_transaction_authorization
      transaction-capture:
        added: added_transaction_capture
      transaction-payment-method:
        updated: updated_transaction_payment_method
      transaction-payment:
        updated: updated_transaction_payment
      transaction-refund:
        added: added_transaction_refund
    queue:
      init-transaction:
        created:
           response: init_transaction_created_response_queue
      transaction:
        completed:
          request: transaction_completed_transaction_response_queue
      payment:
        completed:
          response: payment_completed_transaction_response_queue
          
      breakdown:
        created:
          response: breakdown_created_transaction_response_queue
          
      authorization:
        created:
          response: authorization_created_transaction_response_queue
        completed:
          response: authorization_completed_transaction_response_queue
          
  events:
    queue:
      created:
        request: createad_event_queue
    exchange:
      created: created_events
    key:
      created:
        request: events          

  captures:
    exchange:
      completed:
        capture: completed_capture
    queue:
      capture:
        completed:
          response: capture_completed_response_queue          

  refunds:
    exchange:
      completed:
        refund: completed_refund
    queue:
      refunde:
        completed:
          response: refund_completed_response_queue              

  exports:
    exchange:
      completed: 
         export-data: export_data
    queue:
      export:
        request: export_transactions_request_queue
    key: EXPORT_TRANSACTIONS_REQUEST   

environment:
  nifi-url: http://localhost:60056
  callback-url: ${environment.nifi-url}/completeTransactionCallback
  
security:
  oauth2:
    resource:
      userInfoUri: http://localhost:8880/validateClient

oauth:
  client_id: mp_transaction_client
  client_secret: YzQgODYgZWEgN2EgMjkgNjUgMWQgOWYgODYgMTAgOTIgMmEgNDIgZGUgNDMg

auth:
  service: MP-AUTHSERVER
  path: /oauth/token
  
market-notifications:
  service: MP-MARKETNOTIFICATIONS

export:
  directory:
    output: workspace

---
spring:
  profiles: integration
  data:
    mongodb:
      database: mp_transactions
      host: localhost
      port: 27018
  rabbitmq:
    host: rabbitmq.o2c.ovh
    port: 5672
    username: master-pay
    password: master123

server:
  url: http://o2c.ovh:${server.port}
  
export:
  directory:
    output: exportFiles  


---
spring:
  profiles: qa
  data:
    mongodb:
      database: mp_transactions
      host: localhost
      port: 27018
  rabbitmq:
    host: localhost
    port: 5672
    username: master-pay
    password: master123

server:
  url: http://qa.o2c.ovh:${server.port}
  
export:
  directory:
    output: exportFiles  
